rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user has access to project
    function hasProjectAccess(projectId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/projects/$(projectId)/members/$(request.auth.uid));
    }

    // Documents collection - Multi-tenant document management
    match /documents/{documentId} {
      // Allow read if user owns the document or is admin
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow create if user is authenticated and sets their own userId
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.uploadedAt is timestamp &&
        request.resource.data.updatedAt is timestamp;
      
      // Allow update if user owns the document or is admin
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin()) &&
        request.resource.data.userId == resource.data.userId; // Prevent changing ownership
      
      // Allow delete if user owns the document or is admin
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Users collection - User profile management
    match /users/{userId} {
      // Allow read if user owns the profile or is admin
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Allow create if user is creating their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow update if user owns the profile or is admin
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Allow delete only for admins
      allow delete: if isAdmin();
    }

    // Projects collection - Project management
    match /projects/{projectId} {
      // Allow read if user is project member or admin
      allow read: if isAuthenticated() && 
        (hasProjectAccess(projectId) || isAdmin());
      
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user is project owner or admin
      allow update: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      
      // Allow delete if user is project owner or admin
      allow delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      
      // Project members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && 
          (hasProjectAccess(projectId) || isAdmin());
        allow write: if isAuthenticated() && 
          (hasProjectAccess(projectId) || isAdmin());
      }
    }

    // Teams collection - Team management (for future expansion)
    match /teams/{teamId} {
      // Allow read if user is team member or admin
      allow read: if isAuthenticated() && 
        (exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)) || isAdmin());
      
      // Allow create if user is authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user is team owner or admin
      allow update: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      
      // Allow delete if user is team owner or admin
      allow delete: if isAuthenticated() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());
      
      // Team members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && 
          (exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)) || isAdmin());
        allow write: if isAuthenticated() && 
          (exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)) || isAdmin());
      }
    }

    // Tenants collection - Multi-tenant support (for future expansion)
    match /tenants/{tenantId} {
      // Allow read if user belongs to tenant or is admin
      allow read: if isAuthenticated() && 
        (exists(/databases/$(database)/documents/tenants/$(tenantId)/users/$(request.auth.uid)) || isAdmin());
      
      // Allow create only for admins
      allow create: if isAdmin();
      
      // Allow update only for admins
      allow update: if isAdmin();
      
      // Allow delete only for admins
      allow delete: if isAdmin();
      
      // Tenant users subcollection
      match /users/{userId} {
        allow read: if isAuthenticated() && 
          (exists(/databases/$(database)/documents/tenants/$(tenantId)/users/$(request.auth.uid)) || isAdmin());
        allow write: if isAdmin();
      }
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 